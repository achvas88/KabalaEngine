/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AssetStore!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OpenSG/OSGConfig.h>



#include <OpenSG/OSGNode.h>             // Models Class
#include <OpenSG/OSGForeground.h>       // Foregrounds Class
#include <OpenSG/OSGBackground.h>       // Backgrounds Class
#include <OpenSG/OSGCamera.h>           // Cameras Class
#include <OpenSG/OSGImage.h>            // Images Class
#include <OpenSG/OSGTextureBaseChunk.h> // Textures Class
#include <OpenSG/OSGSound.h>            // Sounds Class
#include <OpenSG/OSGParticleSystem.h>   // ParticleSystems Class
#include <OpenSG/OSGMaterial.h>         // Materials Class
#include <OpenSG/OSGAnimation.h>        // Animations Class
#include <OpenSG/OSGUIDrawingSurface.h> // UserInterfaces Class
#include <OpenSG/OSGVideoWrapper.h>     // Videos Class
#include <OpenSG/OSGFieldContainer.h>   // Others Class

#include "KEAssetStoreBase.h"
#include "KEAssetStore.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::AssetStore
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Node *          AssetStoreBase::_mfModels
    
*/

/*! \var Foreground *    AssetStoreBase::_mfForegrounds
    
*/

/*! \var Background *    AssetStoreBase::_mfBackgrounds
    
*/

/*! \var Camera *        AssetStoreBase::_mfCameras
    
*/

/*! \var Image *         AssetStoreBase::_mfImages
    
*/

/*! \var TextureBaseChunk * AssetStoreBase::_mfTextures
    
*/

/*! \var Sound *         AssetStoreBase::_mfSounds
    
*/

/*! \var ParticleSystem * AssetStoreBase::_mfParticleSystems
    
*/

/*! \var Material *      AssetStoreBase::_mfMaterials
    
*/

/*! \var Animation *     AssetStoreBase::_mfAnimations
    
*/

/*! \var UIDrawingSurface * AssetStoreBase::_mfUserInterfaces
    
*/

/*! \var VideoWrapper *  AssetStoreBase::_mfVideos
    
*/

/*! \var FieldContainer * AssetStoreBase::_mfOthers
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<AssetStore *>::_type("AssetStorePtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(AssetStore *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           AssetStore *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           AssetStore *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void AssetStoreBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecNodePtr::Description(
        MFUnrecNodePtr::getClassType(),
        "Models",
        "",
        ModelsFieldId, ModelsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AssetStore::editHandleModels),
        static_cast<FieldGetMethodSig >(&AssetStore::getHandleModels));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecForegroundPtr::Description(
        MFUnrecForegroundPtr::getClassType(),
        "Foregrounds",
        "",
        ForegroundsFieldId, ForegroundsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AssetStore::editHandleForegrounds),
        static_cast<FieldGetMethodSig >(&AssetStore::getHandleForegrounds));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecBackgroundPtr::Description(
        MFUnrecBackgroundPtr::getClassType(),
        "Backgrounds",
        "",
        BackgroundsFieldId, BackgroundsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AssetStore::editHandleBackgrounds),
        static_cast<FieldGetMethodSig >(&AssetStore::getHandleBackgrounds));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecCameraPtr::Description(
        MFUnrecCameraPtr::getClassType(),
        "Cameras",
        "",
        CamerasFieldId, CamerasFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AssetStore::editHandleCameras),
        static_cast<FieldGetMethodSig >(&AssetStore::getHandleCameras));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecImagePtr::Description(
        MFUnrecImagePtr::getClassType(),
        "Images",
        "",
        ImagesFieldId, ImagesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AssetStore::editHandleImages),
        static_cast<FieldGetMethodSig >(&AssetStore::getHandleImages));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecTextureBaseChunkPtr::Description(
        MFUnrecTextureBaseChunkPtr::getClassType(),
        "Textures",
        "",
        TexturesFieldId, TexturesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AssetStore::editHandleTextures),
        static_cast<FieldGetMethodSig >(&AssetStore::getHandleTextures));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecSoundPtr::Description(
        MFUnrecSoundPtr::getClassType(),
        "Sounds",
        "",
        SoundsFieldId, SoundsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AssetStore::editHandleSounds),
        static_cast<FieldGetMethodSig >(&AssetStore::getHandleSounds));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecParticleSystemPtr::Description(
        MFUnrecParticleSystemPtr::getClassType(),
        "ParticleSystems",
        "",
        ParticleSystemsFieldId, ParticleSystemsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AssetStore::editHandleParticleSystems),
        static_cast<FieldGetMethodSig >(&AssetStore::getHandleParticleSystems));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecMaterialPtr::Description(
        MFUnrecMaterialPtr::getClassType(),
        "Materials",
        "",
        MaterialsFieldId, MaterialsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AssetStore::editHandleMaterials),
        static_cast<FieldGetMethodSig >(&AssetStore::getHandleMaterials));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecAnimationPtr::Description(
        MFUnrecAnimationPtr::getClassType(),
        "Animations",
        "",
        AnimationsFieldId, AnimationsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AssetStore::editHandleAnimations),
        static_cast<FieldGetMethodSig >(&AssetStore::getHandleAnimations));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecUIDrawingSurfacePtr::Description(
        MFUnrecUIDrawingSurfacePtr::getClassType(),
        "UserInterfaces",
        "",
        UserInterfacesFieldId, UserInterfacesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AssetStore::editHandleUserInterfaces),
        static_cast<FieldGetMethodSig >(&AssetStore::getHandleUserInterfaces));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecVideoWrapperPtr::Description(
        MFUnrecVideoWrapperPtr::getClassType(),
        "Videos",
        "",
        VideosFieldId, VideosFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AssetStore::editHandleVideos),
        static_cast<FieldGetMethodSig >(&AssetStore::getHandleVideos));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecFieldContainerPtr::Description(
        MFUnrecFieldContainerPtr::getClassType(),
        "Others",
        "",
        OthersFieldId, OthersFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&AssetStore::editHandleOthers),
        static_cast<FieldGetMethodSig >(&AssetStore::getHandleOthers));

    oType.addInitialDesc(pDesc);
}


AssetStoreBase::TypeObject AssetStoreBase::_type(
    AssetStoreBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&AssetStoreBase::createEmptyLocal),
    AssetStore::initMethod,
    AssetStore::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&AssetStore::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"AssetStore\"\n"
    "\tparent=\"AttachmentContainer\"\n"
    "\tlibrary=\"KabalaEngine\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"false\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    "\tlibnamespace=\"KE\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"Models\"\n"
    "\t\ttype=\"Node\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Foregrounds\"\n"
    "\t\ttype=\"Foreground\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Backgrounds\"\n"
    "\t\ttype=\"Background\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Cameras\"\n"
    "\t\ttype=\"Camera\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Images\"\n"
    "\t\ttype=\"Image\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Textures\"\n"
    "\t\ttype=\"TextureBaseChunk\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Sounds\"\n"
    "\t\ttype=\"Sound\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ParticleSystems\"\n"
    "\t\ttype=\"ParticleSystem\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Materials\"\n"
    "\t\ttype=\"Material\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Animations\"\n"
    "\t\ttype=\"Animation\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"UserInterfaces\"\n"
    "\t\ttype=\"UIDrawingSurface\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Videos\"\n"
    "\t\ttype=\"VideoWrapper\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"Others\"\n"
    "\t\ttype=\"FieldContainer\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &AssetStoreBase::getType(void)
{
    return _type;
}

const FieldContainerType &AssetStoreBase::getType(void) const
{
    return _type;
}

UInt32 AssetStoreBase::getContainerSize(void) const
{
    return sizeof(AssetStore);
}

/*------------------------- decorator get ------------------------------*/


//! Get the AssetStore::_mfModels field.
const MFUnrecNodePtr *AssetStoreBase::getMFModels(void) const
{
    return &_mfModels;
}

MFUnrecNodePtr      *AssetStoreBase::editMFModels         (void)
{
    editMField(ModelsFieldMask, _mfModels);

    return &_mfModels;
}

//! Get the AssetStore::_mfForegrounds field.
const MFUnrecForegroundPtr *AssetStoreBase::getMFForegrounds(void) const
{
    return &_mfForegrounds;
}

MFUnrecForegroundPtr *AssetStoreBase::editMFForegrounds    (void)
{
    editMField(ForegroundsFieldMask, _mfForegrounds);

    return &_mfForegrounds;
}

//! Get the AssetStore::_mfBackgrounds field.
const MFUnrecBackgroundPtr *AssetStoreBase::getMFBackgrounds(void) const
{
    return &_mfBackgrounds;
}

MFUnrecBackgroundPtr *AssetStoreBase::editMFBackgrounds    (void)
{
    editMField(BackgroundsFieldMask, _mfBackgrounds);

    return &_mfBackgrounds;
}

//! Get the AssetStore::_mfCameras field.
const MFUnrecCameraPtr *AssetStoreBase::getMFCameras(void) const
{
    return &_mfCameras;
}

MFUnrecCameraPtr    *AssetStoreBase::editMFCameras        (void)
{
    editMField(CamerasFieldMask, _mfCameras);

    return &_mfCameras;
}

//! Get the AssetStore::_mfImages field.
const MFUnrecImagePtr *AssetStoreBase::getMFImages(void) const
{
    return &_mfImages;
}

MFUnrecImagePtr     *AssetStoreBase::editMFImages         (void)
{
    editMField(ImagesFieldMask, _mfImages);

    return &_mfImages;
}

//! Get the AssetStore::_mfTextures field.
const MFUnrecTextureBaseChunkPtr *AssetStoreBase::getMFTextures(void) const
{
    return &_mfTextures;
}

MFUnrecTextureBaseChunkPtr *AssetStoreBase::editMFTextures       (void)
{
    editMField(TexturesFieldMask, _mfTextures);

    return &_mfTextures;
}

//! Get the AssetStore::_mfSounds field.
const MFUnrecSoundPtr *AssetStoreBase::getMFSounds(void) const
{
    return &_mfSounds;
}

MFUnrecSoundPtr     *AssetStoreBase::editMFSounds         (void)
{
    editMField(SoundsFieldMask, _mfSounds);

    return &_mfSounds;
}

//! Get the AssetStore::_mfParticleSystems field.
const MFUnrecParticleSystemPtr *AssetStoreBase::getMFParticleSystems(void) const
{
    return &_mfParticleSystems;
}

MFUnrecParticleSystemPtr *AssetStoreBase::editMFParticleSystems(void)
{
    editMField(ParticleSystemsFieldMask, _mfParticleSystems);

    return &_mfParticleSystems;
}

//! Get the AssetStore::_mfMaterials field.
const MFUnrecMaterialPtr *AssetStoreBase::getMFMaterials(void) const
{
    return &_mfMaterials;
}

MFUnrecMaterialPtr  *AssetStoreBase::editMFMaterials      (void)
{
    editMField(MaterialsFieldMask, _mfMaterials);

    return &_mfMaterials;
}

//! Get the AssetStore::_mfAnimations field.
const MFUnrecAnimationPtr *AssetStoreBase::getMFAnimations(void) const
{
    return &_mfAnimations;
}

MFUnrecAnimationPtr *AssetStoreBase::editMFAnimations     (void)
{
    editMField(AnimationsFieldMask, _mfAnimations);

    return &_mfAnimations;
}

//! Get the AssetStore::_mfUserInterfaces field.
const MFUnrecUIDrawingSurfacePtr *AssetStoreBase::getMFUserInterfaces(void) const
{
    return &_mfUserInterfaces;
}

MFUnrecUIDrawingSurfacePtr *AssetStoreBase::editMFUserInterfaces (void)
{
    editMField(UserInterfacesFieldMask, _mfUserInterfaces);

    return &_mfUserInterfaces;
}

//! Get the AssetStore::_mfVideos field.
const MFUnrecVideoWrapperPtr *AssetStoreBase::getMFVideos(void) const
{
    return &_mfVideos;
}

MFUnrecVideoWrapperPtr *AssetStoreBase::editMFVideos         (void)
{
    editMField(VideosFieldMask, _mfVideos);

    return &_mfVideos;
}

//! Get the AssetStore::_mfOthers field.
const MFUnrecFieldContainerPtr *AssetStoreBase::getMFOthers(void) const
{
    return &_mfOthers;
}

MFUnrecFieldContainerPtr *AssetStoreBase::editMFOthers         (void)
{
    editMField(OthersFieldMask, _mfOthers);

    return &_mfOthers;
}



void AssetStoreBase::pushToModels(Node * const value)
{
    editMField(ModelsFieldMask, _mfModels);

    _mfModels.push_back(value);
}

void AssetStoreBase::assignModels   (const MFUnrecNodePtr    &value)
{
    MFUnrecNodePtr   ::const_iterator elemIt  =
        value.begin();
    MFUnrecNodePtr   ::const_iterator elemEnd =
        value.end  ();

    static_cast<AssetStore *>(this)->clearModels();

    while(elemIt != elemEnd)
    {
        this->pushToModels(*elemIt);

        ++elemIt;
    }
}

void AssetStoreBase::removeFromModels(UInt32 uiIndex)
{
    if(uiIndex < _mfModels.size())
    {
        editMField(ModelsFieldMask, _mfModels);

        _mfModels.erase(uiIndex);
    }
}

void AssetStoreBase::removeObjFromModels(Node * const value)
{
    Int32 iElemIdx = _mfModels.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ModelsFieldMask, _mfModels);

        _mfModels.erase(iElemIdx);
    }
}
void AssetStoreBase::clearModels(void)
{
    editMField(ModelsFieldMask, _mfModels);


    _mfModels.clear();
}

void AssetStoreBase::pushToForegrounds(Foreground * const value)
{
    editMField(ForegroundsFieldMask, _mfForegrounds);

    _mfForegrounds.push_back(value);
}

void AssetStoreBase::assignForegrounds(const MFUnrecForegroundPtr &value)
{
    MFUnrecForegroundPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecForegroundPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<AssetStore *>(this)->clearForegrounds();

    while(elemIt != elemEnd)
    {
        this->pushToForegrounds(*elemIt);

        ++elemIt;
    }
}

void AssetStoreBase::removeFromForegrounds(UInt32 uiIndex)
{
    if(uiIndex < _mfForegrounds.size())
    {
        editMField(ForegroundsFieldMask, _mfForegrounds);

        _mfForegrounds.erase(uiIndex);
    }
}

void AssetStoreBase::removeObjFromForegrounds(Foreground * const value)
{
    Int32 iElemIdx = _mfForegrounds.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ForegroundsFieldMask, _mfForegrounds);

        _mfForegrounds.erase(iElemIdx);
    }
}
void AssetStoreBase::clearForegrounds(void)
{
    editMField(ForegroundsFieldMask, _mfForegrounds);


    _mfForegrounds.clear();
}

void AssetStoreBase::pushToBackgrounds(Background * const value)
{
    editMField(BackgroundsFieldMask, _mfBackgrounds);

    _mfBackgrounds.push_back(value);
}

void AssetStoreBase::assignBackgrounds(const MFUnrecBackgroundPtr &value)
{
    MFUnrecBackgroundPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecBackgroundPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<AssetStore *>(this)->clearBackgrounds();

    while(elemIt != elemEnd)
    {
        this->pushToBackgrounds(*elemIt);

        ++elemIt;
    }
}

void AssetStoreBase::removeFromBackgrounds(UInt32 uiIndex)
{
    if(uiIndex < _mfBackgrounds.size())
    {
        editMField(BackgroundsFieldMask, _mfBackgrounds);

        _mfBackgrounds.erase(uiIndex);
    }
}

void AssetStoreBase::removeObjFromBackgrounds(Background * const value)
{
    Int32 iElemIdx = _mfBackgrounds.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(BackgroundsFieldMask, _mfBackgrounds);

        _mfBackgrounds.erase(iElemIdx);
    }
}
void AssetStoreBase::clearBackgrounds(void)
{
    editMField(BackgroundsFieldMask, _mfBackgrounds);


    _mfBackgrounds.clear();
}

void AssetStoreBase::pushToCameras(Camera * const value)
{
    editMField(CamerasFieldMask, _mfCameras);

    _mfCameras.push_back(value);
}

void AssetStoreBase::assignCameras  (const MFUnrecCameraPtr  &value)
{
    MFUnrecCameraPtr ::const_iterator elemIt  =
        value.begin();
    MFUnrecCameraPtr ::const_iterator elemEnd =
        value.end  ();

    static_cast<AssetStore *>(this)->clearCameras();

    while(elemIt != elemEnd)
    {
        this->pushToCameras(*elemIt);

        ++elemIt;
    }
}

void AssetStoreBase::removeFromCameras(UInt32 uiIndex)
{
    if(uiIndex < _mfCameras.size())
    {
        editMField(CamerasFieldMask, _mfCameras);

        _mfCameras.erase(uiIndex);
    }
}

void AssetStoreBase::removeObjFromCameras(Camera * const value)
{
    Int32 iElemIdx = _mfCameras.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(CamerasFieldMask, _mfCameras);

        _mfCameras.erase(iElemIdx);
    }
}
void AssetStoreBase::clearCameras(void)
{
    editMField(CamerasFieldMask, _mfCameras);


    _mfCameras.clear();
}

void AssetStoreBase::pushToImages(Image * const value)
{
    editMField(ImagesFieldMask, _mfImages);

    _mfImages.push_back(value);
}

void AssetStoreBase::assignImages   (const MFUnrecImagePtr   &value)
{
    MFUnrecImagePtr  ::const_iterator elemIt  =
        value.begin();
    MFUnrecImagePtr  ::const_iterator elemEnd =
        value.end  ();

    static_cast<AssetStore *>(this)->clearImages();

    while(elemIt != elemEnd)
    {
        this->pushToImages(*elemIt);

        ++elemIt;
    }
}

void AssetStoreBase::removeFromImages(UInt32 uiIndex)
{
    if(uiIndex < _mfImages.size())
    {
        editMField(ImagesFieldMask, _mfImages);

        _mfImages.erase(uiIndex);
    }
}

void AssetStoreBase::removeObjFromImages(Image * const value)
{
    Int32 iElemIdx = _mfImages.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ImagesFieldMask, _mfImages);

        _mfImages.erase(iElemIdx);
    }
}
void AssetStoreBase::clearImages(void)
{
    editMField(ImagesFieldMask, _mfImages);


    _mfImages.clear();
}

void AssetStoreBase::pushToTextures(TextureBaseChunk * const value)
{
    editMField(TexturesFieldMask, _mfTextures);

    _mfTextures.push_back(value);
}

void AssetStoreBase::assignTextures (const MFUnrecTextureBaseChunkPtr &value)
{
    MFUnrecTextureBaseChunkPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecTextureBaseChunkPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<AssetStore *>(this)->clearTextures();

    while(elemIt != elemEnd)
    {
        this->pushToTextures(*elemIt);

        ++elemIt;
    }
}

void AssetStoreBase::removeFromTextures(UInt32 uiIndex)
{
    if(uiIndex < _mfTextures.size())
    {
        editMField(TexturesFieldMask, _mfTextures);

        _mfTextures.erase(uiIndex);
    }
}

void AssetStoreBase::removeObjFromTextures(TextureBaseChunk * const value)
{
    Int32 iElemIdx = _mfTextures.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(TexturesFieldMask, _mfTextures);

        _mfTextures.erase(iElemIdx);
    }
}
void AssetStoreBase::clearTextures(void)
{
    editMField(TexturesFieldMask, _mfTextures);


    _mfTextures.clear();
}

void AssetStoreBase::pushToSounds(Sound * const value)
{
    editMField(SoundsFieldMask, _mfSounds);

    _mfSounds.push_back(value);
}

void AssetStoreBase::assignSounds   (const MFUnrecSoundPtr   &value)
{
    MFUnrecSoundPtr  ::const_iterator elemIt  =
        value.begin();
    MFUnrecSoundPtr  ::const_iterator elemEnd =
        value.end  ();

    static_cast<AssetStore *>(this)->clearSounds();

    while(elemIt != elemEnd)
    {
        this->pushToSounds(*elemIt);

        ++elemIt;
    }
}

void AssetStoreBase::removeFromSounds(UInt32 uiIndex)
{
    if(uiIndex < _mfSounds.size())
    {
        editMField(SoundsFieldMask, _mfSounds);

        _mfSounds.erase(uiIndex);
    }
}

void AssetStoreBase::removeObjFromSounds(Sound * const value)
{
    Int32 iElemIdx = _mfSounds.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(SoundsFieldMask, _mfSounds);

        _mfSounds.erase(iElemIdx);
    }
}
void AssetStoreBase::clearSounds(void)
{
    editMField(SoundsFieldMask, _mfSounds);


    _mfSounds.clear();
}

void AssetStoreBase::pushToParticleSystems(ParticleSystem * const value)
{
    editMField(ParticleSystemsFieldMask, _mfParticleSystems);

    _mfParticleSystems.push_back(value);
}

void AssetStoreBase::assignParticleSystems(const MFUnrecParticleSystemPtr &value)
{
    MFUnrecParticleSystemPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecParticleSystemPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<AssetStore *>(this)->clearParticleSystems();

    while(elemIt != elemEnd)
    {
        this->pushToParticleSystems(*elemIt);

        ++elemIt;
    }
}

void AssetStoreBase::removeFromParticleSystems(UInt32 uiIndex)
{
    if(uiIndex < _mfParticleSystems.size())
    {
        editMField(ParticleSystemsFieldMask, _mfParticleSystems);

        _mfParticleSystems.erase(uiIndex);
    }
}

void AssetStoreBase::removeObjFromParticleSystems(ParticleSystem * const value)
{
    Int32 iElemIdx = _mfParticleSystems.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ParticleSystemsFieldMask, _mfParticleSystems);

        _mfParticleSystems.erase(iElemIdx);
    }
}
void AssetStoreBase::clearParticleSystems(void)
{
    editMField(ParticleSystemsFieldMask, _mfParticleSystems);


    _mfParticleSystems.clear();
}

void AssetStoreBase::pushToMaterials(Material * const value)
{
    editMField(MaterialsFieldMask, _mfMaterials);

    _mfMaterials.push_back(value);
}

void AssetStoreBase::assignMaterials(const MFUnrecMaterialPtr &value)
{
    MFUnrecMaterialPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecMaterialPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<AssetStore *>(this)->clearMaterials();

    while(elemIt != elemEnd)
    {
        this->pushToMaterials(*elemIt);

        ++elemIt;
    }
}

void AssetStoreBase::removeFromMaterials(UInt32 uiIndex)
{
    if(uiIndex < _mfMaterials.size())
    {
        editMField(MaterialsFieldMask, _mfMaterials);

        _mfMaterials.erase(uiIndex);
    }
}

void AssetStoreBase::removeObjFromMaterials(Material * const value)
{
    Int32 iElemIdx = _mfMaterials.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(MaterialsFieldMask, _mfMaterials);

        _mfMaterials.erase(iElemIdx);
    }
}
void AssetStoreBase::clearMaterials(void)
{
    editMField(MaterialsFieldMask, _mfMaterials);


    _mfMaterials.clear();
}

void AssetStoreBase::pushToAnimations(Animation * const value)
{
    editMField(AnimationsFieldMask, _mfAnimations);

    _mfAnimations.push_back(value);
}

void AssetStoreBase::assignAnimations(const MFUnrecAnimationPtr &value)
{
    MFUnrecAnimationPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecAnimationPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<AssetStore *>(this)->clearAnimations();

    while(elemIt != elemEnd)
    {
        this->pushToAnimations(*elemIt);

        ++elemIt;
    }
}

void AssetStoreBase::removeFromAnimations(UInt32 uiIndex)
{
    if(uiIndex < _mfAnimations.size())
    {
        editMField(AnimationsFieldMask, _mfAnimations);

        _mfAnimations.erase(uiIndex);
    }
}

void AssetStoreBase::removeObjFromAnimations(Animation * const value)
{
    Int32 iElemIdx = _mfAnimations.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(AnimationsFieldMask, _mfAnimations);

        _mfAnimations.erase(iElemIdx);
    }
}
void AssetStoreBase::clearAnimations(void)
{
    editMField(AnimationsFieldMask, _mfAnimations);


    _mfAnimations.clear();
}

void AssetStoreBase::pushToUserInterfaces(UIDrawingSurface * const value)
{
    editMField(UserInterfacesFieldMask, _mfUserInterfaces);

    _mfUserInterfaces.push_back(value);
}

void AssetStoreBase::assignUserInterfaces(const MFUnrecUIDrawingSurfacePtr &value)
{
    MFUnrecUIDrawingSurfacePtr::const_iterator elemIt  =
        value.begin();
    MFUnrecUIDrawingSurfacePtr::const_iterator elemEnd =
        value.end  ();

    static_cast<AssetStore *>(this)->clearUserInterfaces();

    while(elemIt != elemEnd)
    {
        this->pushToUserInterfaces(*elemIt);

        ++elemIt;
    }
}

void AssetStoreBase::removeFromUserInterfaces(UInt32 uiIndex)
{
    if(uiIndex < _mfUserInterfaces.size())
    {
        editMField(UserInterfacesFieldMask, _mfUserInterfaces);

        _mfUserInterfaces.erase(uiIndex);
    }
}

void AssetStoreBase::removeObjFromUserInterfaces(UIDrawingSurface * const value)
{
    Int32 iElemIdx = _mfUserInterfaces.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(UserInterfacesFieldMask, _mfUserInterfaces);

        _mfUserInterfaces.erase(iElemIdx);
    }
}
void AssetStoreBase::clearUserInterfaces(void)
{
    editMField(UserInterfacesFieldMask, _mfUserInterfaces);


    _mfUserInterfaces.clear();
}

void AssetStoreBase::pushToVideos(VideoWrapper * const value)
{
    editMField(VideosFieldMask, _mfVideos);

    _mfVideos.push_back(value);
}

void AssetStoreBase::assignVideos   (const MFUnrecVideoWrapperPtr &value)
{
    MFUnrecVideoWrapperPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecVideoWrapperPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<AssetStore *>(this)->clearVideos();

    while(elemIt != elemEnd)
    {
        this->pushToVideos(*elemIt);

        ++elemIt;
    }
}

void AssetStoreBase::removeFromVideos(UInt32 uiIndex)
{
    if(uiIndex < _mfVideos.size())
    {
        editMField(VideosFieldMask, _mfVideos);

        _mfVideos.erase(uiIndex);
    }
}

void AssetStoreBase::removeObjFromVideos(VideoWrapper * const value)
{
    Int32 iElemIdx = _mfVideos.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(VideosFieldMask, _mfVideos);

        _mfVideos.erase(iElemIdx);
    }
}
void AssetStoreBase::clearVideos(void)
{
    editMField(VideosFieldMask, _mfVideos);


    _mfVideos.clear();
}

void AssetStoreBase::pushToOthers(FieldContainer * const value)
{
    editMField(OthersFieldMask, _mfOthers);

    _mfOthers.push_back(value);
}

void AssetStoreBase::assignOthers   (const MFUnrecFieldContainerPtr &value)
{
    MFUnrecFieldContainerPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecFieldContainerPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<AssetStore *>(this)->clearOthers();

    while(elemIt != elemEnd)
    {
        this->pushToOthers(*elemIt);

        ++elemIt;
    }
}

void AssetStoreBase::removeFromOthers(UInt32 uiIndex)
{
    if(uiIndex < _mfOthers.size())
    {
        editMField(OthersFieldMask, _mfOthers);

        _mfOthers.erase(uiIndex);
    }
}

void AssetStoreBase::removeObjFromOthers(FieldContainer * const value)
{
    Int32 iElemIdx = _mfOthers.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(OthersFieldMask, _mfOthers);

        _mfOthers.erase(iElemIdx);
    }
}
void AssetStoreBase::clearOthers(void)
{
    editMField(OthersFieldMask, _mfOthers);


    _mfOthers.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 AssetStoreBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ModelsFieldMask & whichField))
    {
        returnValue += _mfModels.getBinSize();
    }
    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
    {
        returnValue += _mfForegrounds.getBinSize();
    }
    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
    {
        returnValue += _mfBackgrounds.getBinSize();
    }
    if(FieldBits::NoField != (CamerasFieldMask & whichField))
    {
        returnValue += _mfCameras.getBinSize();
    }
    if(FieldBits::NoField != (ImagesFieldMask & whichField))
    {
        returnValue += _mfImages.getBinSize();
    }
    if(FieldBits::NoField != (TexturesFieldMask & whichField))
    {
        returnValue += _mfTextures.getBinSize();
    }
    if(FieldBits::NoField != (SoundsFieldMask & whichField))
    {
        returnValue += _mfSounds.getBinSize();
    }
    if(FieldBits::NoField != (ParticleSystemsFieldMask & whichField))
    {
        returnValue += _mfParticleSystems.getBinSize();
    }
    if(FieldBits::NoField != (MaterialsFieldMask & whichField))
    {
        returnValue += _mfMaterials.getBinSize();
    }
    if(FieldBits::NoField != (AnimationsFieldMask & whichField))
    {
        returnValue += _mfAnimations.getBinSize();
    }
    if(FieldBits::NoField != (UserInterfacesFieldMask & whichField))
    {
        returnValue += _mfUserInterfaces.getBinSize();
    }
    if(FieldBits::NoField != (VideosFieldMask & whichField))
    {
        returnValue += _mfVideos.getBinSize();
    }
    if(FieldBits::NoField != (OthersFieldMask & whichField))
    {
        returnValue += _mfOthers.getBinSize();
    }

    return returnValue;
}

void AssetStoreBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ModelsFieldMask & whichField))
    {
        _mfModels.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
    {
        _mfForegrounds.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
    {
        _mfBackgrounds.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CamerasFieldMask & whichField))
    {
        _mfCameras.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ImagesFieldMask & whichField))
    {
        _mfImages.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TexturesFieldMask & whichField))
    {
        _mfTextures.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SoundsFieldMask & whichField))
    {
        _mfSounds.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ParticleSystemsFieldMask & whichField))
    {
        _mfParticleSystems.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaterialsFieldMask & whichField))
    {
        _mfMaterials.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AnimationsFieldMask & whichField))
    {
        _mfAnimations.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UserInterfacesFieldMask & whichField))
    {
        _mfUserInterfaces.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VideosFieldMask & whichField))
    {
        _mfVideos.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OthersFieldMask & whichField))
    {
        _mfOthers.copyToBin(pMem);
    }
}

void AssetStoreBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ModelsFieldMask & whichField))
    {
        _mfModels.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
    {
        _mfForegrounds.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
    {
        _mfBackgrounds.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CamerasFieldMask & whichField))
    {
        _mfCameras.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ImagesFieldMask & whichField))
    {
        _mfImages.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TexturesFieldMask & whichField))
    {
        _mfTextures.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SoundsFieldMask & whichField))
    {
        _mfSounds.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ParticleSystemsFieldMask & whichField))
    {
        _mfParticleSystems.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaterialsFieldMask & whichField))
    {
        _mfMaterials.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AnimationsFieldMask & whichField))
    {
        _mfAnimations.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UserInterfacesFieldMask & whichField))
    {
        _mfUserInterfaces.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VideosFieldMask & whichField))
    {
        _mfVideos.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OthersFieldMask & whichField))
    {
        _mfOthers.copyFromBin(pMem);
    }
}

//! create a new instance of the class
AssetStoreTransitPtr AssetStoreBase::createLocal(BitVector bFlags)
{
    AssetStoreTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<AssetStore>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
AssetStoreTransitPtr AssetStoreBase::createDependent(BitVector bFlags)
{
    AssetStoreTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<AssetStore>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
AssetStoreTransitPtr AssetStoreBase::create(void)
{
    AssetStoreTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<AssetStore>(tmpPtr);
    }

    return fc;
}

AssetStore *AssetStoreBase::createEmptyLocal(BitVector bFlags)
{
    AssetStore *returnValue;

    newPtr<AssetStore>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
AssetStore *AssetStoreBase::createEmpty(void)
{
    AssetStore *returnValue;

    newPtr<AssetStore>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr AssetStoreBase::shallowCopyLocal(
    BitVector bFlags) const
{
    AssetStore *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const AssetStore *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr AssetStoreBase::shallowCopyDependent(
    BitVector bFlags) const
{
    AssetStore *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const AssetStore *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr AssetStoreBase::shallowCopy(void) const
{
    AssetStore *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const AssetStore *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

AssetStoreBase::AssetStoreBase(void) :
    Inherited(),
    _mfModels                 (),
    _mfForegrounds            (),
    _mfBackgrounds            (),
    _mfCameras                (),
    _mfImages                 (),
    _mfTextures               (),
    _mfSounds                 (),
    _mfParticleSystems        (),
    _mfMaterials              (),
    _mfAnimations             (),
    _mfUserInterfaces         (),
    _mfVideos                 (),
    _mfOthers                 ()
{
}

AssetStoreBase::AssetStoreBase(const AssetStoreBase &source) :
    Inherited(source),
    _mfModels                 (),
    _mfForegrounds            (),
    _mfBackgrounds            (),
    _mfCameras                (),
    _mfImages                 (),
    _mfTextures               (),
    _mfSounds                 (),
    _mfParticleSystems        (),
    _mfMaterials              (),
    _mfAnimations             (),
    _mfUserInterfaces         (),
    _mfVideos                 (),
    _mfOthers                 ()
{
}


/*-------------------------- destructors ----------------------------------*/

AssetStoreBase::~AssetStoreBase(void)
{
}

void AssetStoreBase::onCreate(const AssetStore *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        AssetStore *pThis = static_cast<AssetStore *>(this);

        MFUnrecNodePtr::const_iterator ModelsIt  =
            source->_mfModels.begin();
        MFUnrecNodePtr::const_iterator ModelsEnd =
            source->_mfModels.end  ();

        while(ModelsIt != ModelsEnd)
        {
            pThis->pushToModels(*ModelsIt);

            ++ModelsIt;
        }

        MFUnrecForegroundPtr::const_iterator ForegroundsIt  =
            source->_mfForegrounds.begin();
        MFUnrecForegroundPtr::const_iterator ForegroundsEnd =
            source->_mfForegrounds.end  ();

        while(ForegroundsIt != ForegroundsEnd)
        {
            pThis->pushToForegrounds(*ForegroundsIt);

            ++ForegroundsIt;
        }

        MFUnrecBackgroundPtr::const_iterator BackgroundsIt  =
            source->_mfBackgrounds.begin();
        MFUnrecBackgroundPtr::const_iterator BackgroundsEnd =
            source->_mfBackgrounds.end  ();

        while(BackgroundsIt != BackgroundsEnd)
        {
            pThis->pushToBackgrounds(*BackgroundsIt);

            ++BackgroundsIt;
        }

        MFUnrecCameraPtr::const_iterator CamerasIt  =
            source->_mfCameras.begin();
        MFUnrecCameraPtr::const_iterator CamerasEnd =
            source->_mfCameras.end  ();

        while(CamerasIt != CamerasEnd)
        {
            pThis->pushToCameras(*CamerasIt);

            ++CamerasIt;
        }

        MFUnrecImagePtr::const_iterator ImagesIt  =
            source->_mfImages.begin();
        MFUnrecImagePtr::const_iterator ImagesEnd =
            source->_mfImages.end  ();

        while(ImagesIt != ImagesEnd)
        {
            pThis->pushToImages(*ImagesIt);

            ++ImagesIt;
        }

        MFUnrecTextureBaseChunkPtr::const_iterator TexturesIt  =
            source->_mfTextures.begin();
        MFUnrecTextureBaseChunkPtr::const_iterator TexturesEnd =
            source->_mfTextures.end  ();

        while(TexturesIt != TexturesEnd)
        {
            pThis->pushToTextures(*TexturesIt);

            ++TexturesIt;
        }

        MFUnrecSoundPtr::const_iterator SoundsIt  =
            source->_mfSounds.begin();
        MFUnrecSoundPtr::const_iterator SoundsEnd =
            source->_mfSounds.end  ();

        while(SoundsIt != SoundsEnd)
        {
            pThis->pushToSounds(*SoundsIt);

            ++SoundsIt;
        }

        MFUnrecParticleSystemPtr::const_iterator ParticleSystemsIt  =
            source->_mfParticleSystems.begin();
        MFUnrecParticleSystemPtr::const_iterator ParticleSystemsEnd =
            source->_mfParticleSystems.end  ();

        while(ParticleSystemsIt != ParticleSystemsEnd)
        {
            pThis->pushToParticleSystems(*ParticleSystemsIt);

            ++ParticleSystemsIt;
        }

        MFUnrecMaterialPtr::const_iterator MaterialsIt  =
            source->_mfMaterials.begin();
        MFUnrecMaterialPtr::const_iterator MaterialsEnd =
            source->_mfMaterials.end  ();

        while(MaterialsIt != MaterialsEnd)
        {
            pThis->pushToMaterials(*MaterialsIt);

            ++MaterialsIt;
        }

        MFUnrecAnimationPtr::const_iterator AnimationsIt  =
            source->_mfAnimations.begin();
        MFUnrecAnimationPtr::const_iterator AnimationsEnd =
            source->_mfAnimations.end  ();

        while(AnimationsIt != AnimationsEnd)
        {
            pThis->pushToAnimations(*AnimationsIt);

            ++AnimationsIt;
        }

        MFUnrecUIDrawingSurfacePtr::const_iterator UserInterfacesIt  =
            source->_mfUserInterfaces.begin();
        MFUnrecUIDrawingSurfacePtr::const_iterator UserInterfacesEnd =
            source->_mfUserInterfaces.end  ();

        while(UserInterfacesIt != UserInterfacesEnd)
        {
            pThis->pushToUserInterfaces(*UserInterfacesIt);

            ++UserInterfacesIt;
        }

        MFUnrecVideoWrapperPtr::const_iterator VideosIt  =
            source->_mfVideos.begin();
        MFUnrecVideoWrapperPtr::const_iterator VideosEnd =
            source->_mfVideos.end  ();

        while(VideosIt != VideosEnd)
        {
            pThis->pushToVideos(*VideosIt);

            ++VideosIt;
        }

        MFUnrecFieldContainerPtr::const_iterator OthersIt  =
            source->_mfOthers.begin();
        MFUnrecFieldContainerPtr::const_iterator OthersEnd =
            source->_mfOthers.end  ();

        while(OthersIt != OthersEnd)
        {
            pThis->pushToOthers(*OthersIt);

            ++OthersIt;
        }
    }
}

GetFieldHandlePtr AssetStoreBase::getHandleModels          (void) const
{
    MFUnrecNodePtr::GetHandlePtr returnValue(
        new  MFUnrecNodePtr::GetHandle(
             &_mfModels,
             this->getType().getFieldDesc(ModelsFieldId),
             const_cast<AssetStoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AssetStoreBase::editHandleModels         (void)
{
    MFUnrecNodePtr::EditHandlePtr returnValue(
        new  MFUnrecNodePtr::EditHandle(
             &_mfModels,
             this->getType().getFieldDesc(ModelsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&AssetStore::pushToModels,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&AssetStore::removeFromModels,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&AssetStore::removeObjFromModels,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&AssetStore::clearModels,
                    static_cast<AssetStore *>(this)));

    editMField(ModelsFieldMask, _mfModels);

    return returnValue;
}

GetFieldHandlePtr AssetStoreBase::getHandleForegrounds     (void) const
{
    MFUnrecForegroundPtr::GetHandlePtr returnValue(
        new  MFUnrecForegroundPtr::GetHandle(
             &_mfForegrounds,
             this->getType().getFieldDesc(ForegroundsFieldId),
             const_cast<AssetStoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AssetStoreBase::editHandleForegrounds    (void)
{
    MFUnrecForegroundPtr::EditHandlePtr returnValue(
        new  MFUnrecForegroundPtr::EditHandle(
             &_mfForegrounds,
             this->getType().getFieldDesc(ForegroundsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&AssetStore::pushToForegrounds,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&AssetStore::removeFromForegrounds,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&AssetStore::removeObjFromForegrounds,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&AssetStore::clearForegrounds,
                    static_cast<AssetStore *>(this)));

    editMField(ForegroundsFieldMask, _mfForegrounds);

    return returnValue;
}

GetFieldHandlePtr AssetStoreBase::getHandleBackgrounds     (void) const
{
    MFUnrecBackgroundPtr::GetHandlePtr returnValue(
        new  MFUnrecBackgroundPtr::GetHandle(
             &_mfBackgrounds,
             this->getType().getFieldDesc(BackgroundsFieldId),
             const_cast<AssetStoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AssetStoreBase::editHandleBackgrounds    (void)
{
    MFUnrecBackgroundPtr::EditHandlePtr returnValue(
        new  MFUnrecBackgroundPtr::EditHandle(
             &_mfBackgrounds,
             this->getType().getFieldDesc(BackgroundsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&AssetStore::pushToBackgrounds,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&AssetStore::removeFromBackgrounds,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&AssetStore::removeObjFromBackgrounds,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&AssetStore::clearBackgrounds,
                    static_cast<AssetStore *>(this)));

    editMField(BackgroundsFieldMask, _mfBackgrounds);

    return returnValue;
}

GetFieldHandlePtr AssetStoreBase::getHandleCameras         (void) const
{
    MFUnrecCameraPtr::GetHandlePtr returnValue(
        new  MFUnrecCameraPtr::GetHandle(
             &_mfCameras,
             this->getType().getFieldDesc(CamerasFieldId),
             const_cast<AssetStoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AssetStoreBase::editHandleCameras        (void)
{
    MFUnrecCameraPtr::EditHandlePtr returnValue(
        new  MFUnrecCameraPtr::EditHandle(
             &_mfCameras,
             this->getType().getFieldDesc(CamerasFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&AssetStore::pushToCameras,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&AssetStore::removeFromCameras,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&AssetStore::removeObjFromCameras,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&AssetStore::clearCameras,
                    static_cast<AssetStore *>(this)));

    editMField(CamerasFieldMask, _mfCameras);

    return returnValue;
}

GetFieldHandlePtr AssetStoreBase::getHandleImages          (void) const
{
    MFUnrecImagePtr::GetHandlePtr returnValue(
        new  MFUnrecImagePtr::GetHandle(
             &_mfImages,
             this->getType().getFieldDesc(ImagesFieldId),
             const_cast<AssetStoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AssetStoreBase::editHandleImages         (void)
{
    MFUnrecImagePtr::EditHandlePtr returnValue(
        new  MFUnrecImagePtr::EditHandle(
             &_mfImages,
             this->getType().getFieldDesc(ImagesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&AssetStore::pushToImages,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&AssetStore::removeFromImages,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&AssetStore::removeObjFromImages,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&AssetStore::clearImages,
                    static_cast<AssetStore *>(this)));

    editMField(ImagesFieldMask, _mfImages);

    return returnValue;
}

GetFieldHandlePtr AssetStoreBase::getHandleTextures        (void) const
{
    MFUnrecTextureBaseChunkPtr::GetHandlePtr returnValue(
        new  MFUnrecTextureBaseChunkPtr::GetHandle(
             &_mfTextures,
             this->getType().getFieldDesc(TexturesFieldId),
             const_cast<AssetStoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AssetStoreBase::editHandleTextures       (void)
{
    MFUnrecTextureBaseChunkPtr::EditHandlePtr returnValue(
        new  MFUnrecTextureBaseChunkPtr::EditHandle(
             &_mfTextures,
             this->getType().getFieldDesc(TexturesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&AssetStore::pushToTextures,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&AssetStore::removeFromTextures,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&AssetStore::removeObjFromTextures,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&AssetStore::clearTextures,
                    static_cast<AssetStore *>(this)));

    editMField(TexturesFieldMask, _mfTextures);

    return returnValue;
}

GetFieldHandlePtr AssetStoreBase::getHandleSounds          (void) const
{
    MFUnrecSoundPtr::GetHandlePtr returnValue(
        new  MFUnrecSoundPtr::GetHandle(
             &_mfSounds,
             this->getType().getFieldDesc(SoundsFieldId),
             const_cast<AssetStoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AssetStoreBase::editHandleSounds         (void)
{
    MFUnrecSoundPtr::EditHandlePtr returnValue(
        new  MFUnrecSoundPtr::EditHandle(
             &_mfSounds,
             this->getType().getFieldDesc(SoundsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&AssetStore::pushToSounds,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&AssetStore::removeFromSounds,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&AssetStore::removeObjFromSounds,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&AssetStore::clearSounds,
                    static_cast<AssetStore *>(this)));

    editMField(SoundsFieldMask, _mfSounds);

    return returnValue;
}

GetFieldHandlePtr AssetStoreBase::getHandleParticleSystems (void) const
{
    MFUnrecParticleSystemPtr::GetHandlePtr returnValue(
        new  MFUnrecParticleSystemPtr::GetHandle(
             &_mfParticleSystems,
             this->getType().getFieldDesc(ParticleSystemsFieldId),
             const_cast<AssetStoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AssetStoreBase::editHandleParticleSystems(void)
{
    MFUnrecParticleSystemPtr::EditHandlePtr returnValue(
        new  MFUnrecParticleSystemPtr::EditHandle(
             &_mfParticleSystems,
             this->getType().getFieldDesc(ParticleSystemsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&AssetStore::pushToParticleSystems,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&AssetStore::removeFromParticleSystems,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&AssetStore::removeObjFromParticleSystems,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&AssetStore::clearParticleSystems,
                    static_cast<AssetStore *>(this)));

    editMField(ParticleSystemsFieldMask, _mfParticleSystems);

    return returnValue;
}

GetFieldHandlePtr AssetStoreBase::getHandleMaterials       (void) const
{
    MFUnrecMaterialPtr::GetHandlePtr returnValue(
        new  MFUnrecMaterialPtr::GetHandle(
             &_mfMaterials,
             this->getType().getFieldDesc(MaterialsFieldId),
             const_cast<AssetStoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AssetStoreBase::editHandleMaterials      (void)
{
    MFUnrecMaterialPtr::EditHandlePtr returnValue(
        new  MFUnrecMaterialPtr::EditHandle(
             &_mfMaterials,
             this->getType().getFieldDesc(MaterialsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&AssetStore::pushToMaterials,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&AssetStore::removeFromMaterials,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&AssetStore::removeObjFromMaterials,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&AssetStore::clearMaterials,
                    static_cast<AssetStore *>(this)));

    editMField(MaterialsFieldMask, _mfMaterials);

    return returnValue;
}

GetFieldHandlePtr AssetStoreBase::getHandleAnimations      (void) const
{
    MFUnrecAnimationPtr::GetHandlePtr returnValue(
        new  MFUnrecAnimationPtr::GetHandle(
             &_mfAnimations,
             this->getType().getFieldDesc(AnimationsFieldId),
             const_cast<AssetStoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AssetStoreBase::editHandleAnimations     (void)
{
    MFUnrecAnimationPtr::EditHandlePtr returnValue(
        new  MFUnrecAnimationPtr::EditHandle(
             &_mfAnimations,
             this->getType().getFieldDesc(AnimationsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&AssetStore::pushToAnimations,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&AssetStore::removeFromAnimations,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&AssetStore::removeObjFromAnimations,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&AssetStore::clearAnimations,
                    static_cast<AssetStore *>(this)));

    editMField(AnimationsFieldMask, _mfAnimations);

    return returnValue;
}

GetFieldHandlePtr AssetStoreBase::getHandleUserInterfaces  (void) const
{
    MFUnrecUIDrawingSurfacePtr::GetHandlePtr returnValue(
        new  MFUnrecUIDrawingSurfacePtr::GetHandle(
             &_mfUserInterfaces,
             this->getType().getFieldDesc(UserInterfacesFieldId),
             const_cast<AssetStoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AssetStoreBase::editHandleUserInterfaces (void)
{
    MFUnrecUIDrawingSurfacePtr::EditHandlePtr returnValue(
        new  MFUnrecUIDrawingSurfacePtr::EditHandle(
             &_mfUserInterfaces,
             this->getType().getFieldDesc(UserInterfacesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&AssetStore::pushToUserInterfaces,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&AssetStore::removeFromUserInterfaces,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&AssetStore::removeObjFromUserInterfaces,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&AssetStore::clearUserInterfaces,
                    static_cast<AssetStore *>(this)));

    editMField(UserInterfacesFieldMask, _mfUserInterfaces);

    return returnValue;
}

GetFieldHandlePtr AssetStoreBase::getHandleVideos          (void) const
{
    MFUnrecVideoWrapperPtr::GetHandlePtr returnValue(
        new  MFUnrecVideoWrapperPtr::GetHandle(
             &_mfVideos,
             this->getType().getFieldDesc(VideosFieldId),
             const_cast<AssetStoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AssetStoreBase::editHandleVideos         (void)
{
    MFUnrecVideoWrapperPtr::EditHandlePtr returnValue(
        new  MFUnrecVideoWrapperPtr::EditHandle(
             &_mfVideos,
             this->getType().getFieldDesc(VideosFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&AssetStore::pushToVideos,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&AssetStore::removeFromVideos,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&AssetStore::removeObjFromVideos,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&AssetStore::clearVideos,
                    static_cast<AssetStore *>(this)));

    editMField(VideosFieldMask, _mfVideos);

    return returnValue;
}

GetFieldHandlePtr AssetStoreBase::getHandleOthers          (void) const
{
    MFUnrecFieldContainerPtr::GetHandlePtr returnValue(
        new  MFUnrecFieldContainerPtr::GetHandle(
             &_mfOthers,
             this->getType().getFieldDesc(OthersFieldId),
             const_cast<AssetStoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AssetStoreBase::editHandleOthers         (void)
{
    MFUnrecFieldContainerPtr::EditHandlePtr returnValue(
        new  MFUnrecFieldContainerPtr::EditHandle(
             &_mfOthers,
             this->getType().getFieldDesc(OthersFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&AssetStore::pushToOthers,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&AssetStore::removeFromOthers,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&AssetStore::removeObjFromOthers,
                    static_cast<AssetStore *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&AssetStore::clearOthers,
                    static_cast<AssetStore *>(this)));

    editMField(OthersFieldMask, _mfOthers);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void AssetStoreBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    AssetStore *pThis = static_cast<AssetStore *>(this);

    pThis->execSync(static_cast<AssetStore *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *AssetStoreBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    AssetStore *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const AssetStore *>(pRefAspect),
                  dynamic_cast<const AssetStore *>(this));

    return returnValue;
}
#endif

void AssetStoreBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<AssetStore *>(this)->clearModels();

    static_cast<AssetStore *>(this)->clearForegrounds();

    static_cast<AssetStore *>(this)->clearBackgrounds();

    static_cast<AssetStore *>(this)->clearCameras();

    static_cast<AssetStore *>(this)->clearImages();

    static_cast<AssetStore *>(this)->clearTextures();

    static_cast<AssetStore *>(this)->clearSounds();

    static_cast<AssetStore *>(this)->clearParticleSystems();

    static_cast<AssetStore *>(this)->clearMaterials();

    static_cast<AssetStore *>(this)->clearAnimations();

    static_cast<AssetStore *>(this)->clearUserInterfaces();

    static_cast<AssetStore *>(this)->clearVideos();

    static_cast<AssetStore *>(this)->clearOthers();


}


OSG_END_NAMESPACE
