/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AssetStore!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &AssetStoreBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 AssetStoreBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 AssetStoreBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the \a index element the AssetStore::_mfModels field.
inline
Node * AssetStoreBase::getModels(const UInt32 index) const
{
    return _mfModels[index];
}

//! Get the value of the \a index element the AssetStore::_mfForegrounds field.
inline
Foreground * AssetStoreBase::getForegrounds(const UInt32 index) const
{
    return _mfForegrounds[index];
}

//! Get the value of the \a index element the AssetStore::_mfBackgrounds field.
inline
Background * AssetStoreBase::getBackgrounds(const UInt32 index) const
{
    return _mfBackgrounds[index];
}

//! Get the value of the \a index element the AssetStore::_mfCameras field.
inline
Camera * AssetStoreBase::getCameras(const UInt32 index) const
{
    return _mfCameras[index];
}

//! Get the value of the \a index element the AssetStore::_mfImages field.
inline
Image * AssetStoreBase::getImages(const UInt32 index) const
{
    return _mfImages[index];
}

//! Get the value of the \a index element the AssetStore::_mfTextures field.
inline
TextureBaseChunk * AssetStoreBase::getTextures(const UInt32 index) const
{
    return _mfTextures[index];
}

//! Get the value of the \a index element the AssetStore::_mfSounds field.
inline
Sound * AssetStoreBase::getSounds(const UInt32 index) const
{
    return _mfSounds[index];
}

//! Get the value of the \a index element the AssetStore::_mfParticleSystems field.
inline
ParticleSystem * AssetStoreBase::getParticleSystems(const UInt32 index) const
{
    return _mfParticleSystems[index];
}

//! Get the value of the \a index element the AssetStore::_mfMaterials field.
inline
Material * AssetStoreBase::getMaterials(const UInt32 index) const
{
    return _mfMaterials[index];
}

//! Get the value of the \a index element the AssetStore::_mfAnimations field.
inline
Animation * AssetStoreBase::getAnimations(const UInt32 index) const
{
    return _mfAnimations[index];
}

//! Get the value of the \a index element the AssetStore::_mfUserInterfaces field.
inline
UIDrawingSurface * AssetStoreBase::getUserInterfaces(const UInt32 index) const
{
    return _mfUserInterfaces[index];
}

//! Get the value of the \a index element the AssetStore::_mfVideos field.
inline
VideoWrapper * AssetStoreBase::getVideos(const UInt32 index) const
{
    return _mfVideos[index];
}

//! Get the value of the \a index element the AssetStore::_mfOthers field.
inline
FieldContainer * AssetStoreBase::getOthers(const UInt32 index) const
{
    return _mfOthers[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void AssetStoreBase::execSync (      AssetStoreBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ModelsFieldMask & whichField))
        _mfModels.syncWith(pFrom->_mfModels,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
        _mfForegrounds.syncWith(pFrom->_mfForegrounds,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (BackgroundsFieldMask & whichField))
        _mfBackgrounds.syncWith(pFrom->_mfBackgrounds,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (CamerasFieldMask & whichField))
        _mfCameras.syncWith(pFrom->_mfCameras,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ImagesFieldMask & whichField))
        _mfImages.syncWith(pFrom->_mfImages,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (TexturesFieldMask & whichField))
        _mfTextures.syncWith(pFrom->_mfTextures,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (SoundsFieldMask & whichField))
        _mfSounds.syncWith(pFrom->_mfSounds,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ParticleSystemsFieldMask & whichField))
        _mfParticleSystems.syncWith(pFrom->_mfParticleSystems,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (MaterialsFieldMask & whichField))
        _mfMaterials.syncWith(pFrom->_mfMaterials,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (AnimationsFieldMask & whichField))
        _mfAnimations.syncWith(pFrom->_mfAnimations,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (UserInterfacesFieldMask & whichField))
        _mfUserInterfaces.syncWith(pFrom->_mfUserInterfaces,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (VideosFieldMask & whichField))
        _mfVideos.syncWith(pFrom->_mfVideos,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (OthersFieldMask & whichField))
        _mfOthers.syncWith(pFrom->_mfOthers,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);
}
#endif


inline
const Char8 *AssetStoreBase::getClassname(void)
{
    return "AssetStore";
}
OSG_GEN_CONTAINERPTR(AssetStore);

OSG_END_NAMESPACE

