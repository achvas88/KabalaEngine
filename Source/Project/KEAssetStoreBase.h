/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AssetStore
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _KEASSETSTOREBASE_H_
#define _KEASSETSTOREBASE_H_
#ifdef __sgi
#pragma once
#endif



#include <OpenSG/OSGConfig.h>
#include "KEKabalaEngineDef.h"
#include "KEConfig.h"

//#include "OpenSG/OSGBaseTypes.h"


#include <OpenSG/OSGAttachmentContainer.h> // Parent

#include <OpenSG/OSGNodeFields.h>       // Models type
#include <OpenSG/OSGForegroundFields.h> // Foregrounds type
#include <OpenSG/OSGBackgroundFields.h> // Backgrounds type
#include <OpenSG/OSGCameraFields.h>     // Cameras type
#include <OpenSG/OSGImageFields.h>      // Images type
#include <OpenSG/OSGTextureBaseChunkFields.h> // Textures type
#include <OpenSG/OSGSoundFields.h>      // Sounds type
#include <OpenSG/OSGParticleSystemFields.h> // ParticleSystems type
#include <OpenSG/OSGMaterialFields.h>   // Materials type
#include <OpenSG/OSGAnimationFields.h>  // Animations type
#include <OpenSG/OSGUIDrawingSurfaceFields.h> // UserInterfaces type
#include <OpenSG/OSGVideoWrapperFields.h> // Videos type
#include <OpenSG/OSGFieldContainerFields.h> // Others type

#include "KEAssetStoreFields.h"

OSG_BEGIN_NAMESPACE

class AssetStore;

//! \brief AssetStore Base Class.

class KE_KABALAENGINE_DLLMAPPING AssetStoreBase : public AttachmentContainer
{
  public:

    typedef AttachmentContainer Inherited;
    typedef AttachmentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(AssetStore);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        ModelsFieldId = Inherited::NextFieldId,
        ForegroundsFieldId = ModelsFieldId + 1,
        BackgroundsFieldId = ForegroundsFieldId + 1,
        CamerasFieldId = BackgroundsFieldId + 1,
        ImagesFieldId = CamerasFieldId + 1,
        TexturesFieldId = ImagesFieldId + 1,
        SoundsFieldId = TexturesFieldId + 1,
        ParticleSystemsFieldId = SoundsFieldId + 1,
        MaterialsFieldId = ParticleSystemsFieldId + 1,
        AnimationsFieldId = MaterialsFieldId + 1,
        UserInterfacesFieldId = AnimationsFieldId + 1,
        VideosFieldId = UserInterfacesFieldId + 1,
        OthersFieldId = VideosFieldId + 1,
        NextFieldId = OthersFieldId + 1
    };

    static const OSG::BitVector ModelsFieldMask =
        (TypeTraits<BitVector>::One << ModelsFieldId);
    static const OSG::BitVector ForegroundsFieldMask =
        (TypeTraits<BitVector>::One << ForegroundsFieldId);
    static const OSG::BitVector BackgroundsFieldMask =
        (TypeTraits<BitVector>::One << BackgroundsFieldId);
    static const OSG::BitVector CamerasFieldMask =
        (TypeTraits<BitVector>::One << CamerasFieldId);
    static const OSG::BitVector ImagesFieldMask =
        (TypeTraits<BitVector>::One << ImagesFieldId);
    static const OSG::BitVector TexturesFieldMask =
        (TypeTraits<BitVector>::One << TexturesFieldId);
    static const OSG::BitVector SoundsFieldMask =
        (TypeTraits<BitVector>::One << SoundsFieldId);
    static const OSG::BitVector ParticleSystemsFieldMask =
        (TypeTraits<BitVector>::One << ParticleSystemsFieldId);
    static const OSG::BitVector MaterialsFieldMask =
        (TypeTraits<BitVector>::One << MaterialsFieldId);
    static const OSG::BitVector AnimationsFieldMask =
        (TypeTraits<BitVector>::One << AnimationsFieldId);
    static const OSG::BitVector UserInterfacesFieldMask =
        (TypeTraits<BitVector>::One << UserInterfacesFieldId);
    static const OSG::BitVector VideosFieldMask =
        (TypeTraits<BitVector>::One << VideosFieldId);
    static const OSG::BitVector OthersFieldMask =
        (TypeTraits<BitVector>::One << OthersFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef MFUnrecNodePtr    MFModelsType;
    typedef MFUnrecForegroundPtr MFForegroundsType;
    typedef MFUnrecBackgroundPtr MFBackgroundsType;
    typedef MFUnrecCameraPtr  MFCamerasType;
    typedef MFUnrecImagePtr   MFImagesType;
    typedef MFUnrecTextureBaseChunkPtr MFTexturesType;
    typedef MFUnrecSoundPtr   MFSoundsType;
    typedef MFUnrecParticleSystemPtr MFParticleSystemsType;
    typedef MFUnrecMaterialPtr MFMaterialsType;
    typedef MFUnrecAnimationPtr MFAnimationsType;
    typedef MFUnrecUIDrawingSurfacePtr MFUserInterfacesType;
    typedef MFUnrecVideoWrapperPtr MFVideosType;
    typedef MFUnrecFieldContainerPtr MFOthersType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const MFUnrecNodePtr      *getMFModels         (void) const;
                  MFUnrecNodePtr      *editMFModels         (void);
            const MFUnrecForegroundPtr *getMFForegrounds    (void) const;
                  MFUnrecForegroundPtr *editMFForegrounds    (void);
            const MFUnrecBackgroundPtr *getMFBackgrounds    (void) const;
                  MFUnrecBackgroundPtr *editMFBackgrounds    (void);
            const MFUnrecCameraPtr    *getMFCameras        (void) const;
                  MFUnrecCameraPtr    *editMFCameras        (void);
            const MFUnrecImagePtr     *getMFImages         (void) const;
                  MFUnrecImagePtr     *editMFImages         (void);
            const MFUnrecTextureBaseChunkPtr *getMFTextures       (void) const;
                  MFUnrecTextureBaseChunkPtr *editMFTextures       (void);
            const MFUnrecSoundPtr     *getMFSounds         (void) const;
                  MFUnrecSoundPtr     *editMFSounds         (void);
            const MFUnrecParticleSystemPtr *getMFParticleSystems(void) const;
                  MFUnrecParticleSystemPtr *editMFParticleSystems(void);
            const MFUnrecMaterialPtr  *getMFMaterials      (void) const;
                  MFUnrecMaterialPtr  *editMFMaterials      (void);
            const MFUnrecAnimationPtr *getMFAnimations     (void) const;
                  MFUnrecAnimationPtr *editMFAnimations     (void);
            const MFUnrecUIDrawingSurfacePtr *getMFUserInterfaces (void) const;
                  MFUnrecUIDrawingSurfacePtr *editMFUserInterfaces (void);
            const MFUnrecVideoWrapperPtr *getMFVideos         (void) const;
                  MFUnrecVideoWrapperPtr *editMFVideos         (void);
            const MFUnrecFieldContainerPtr *getMFOthers         (void) const;
                  MFUnrecFieldContainerPtr *editMFOthers         (void);


                  Node * getModels         (const UInt32 index) const;

                  Foreground * getForegrounds    (const UInt32 index) const;

                  Background * getBackgrounds    (const UInt32 index) const;

                  Camera * getCameras        (const UInt32 index) const;

                  Image * getImages         (const UInt32 index) const;

                  TextureBaseChunk * getTextures       (const UInt32 index) const;

                  Sound * getSounds         (const UInt32 index) const;

                  ParticleSystem * getParticleSystems(const UInt32 index) const;

                  Material * getMaterials      (const UInt32 index) const;

                  Animation * getAnimations     (const UInt32 index) const;

                  UIDrawingSurface * getUserInterfaces (const UInt32 index) const;

                  VideoWrapper * getVideos         (const UInt32 index) const;

                  FieldContainer * getOthers         (const UInt32 index) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToModels              (Node * const value   );
    void assignModels             (const MFUnrecNodePtr    &value);
    void removeFromModels (UInt32               uiIndex );
    void removeObjFromModels(Node * const value   );
    void clearModels                (void                         );

    void pushToForegrounds           (Foreground * const value   );
    void assignForegrounds          (const MFUnrecForegroundPtr &value);
    void removeFromForegrounds (UInt32               uiIndex );
    void removeObjFromForegrounds(Foreground * const value   );
    void clearForegrounds            (void                         );

    void pushToBackgrounds           (Background * const value   );
    void assignBackgrounds          (const MFUnrecBackgroundPtr &value);
    void removeFromBackgrounds (UInt32               uiIndex );
    void removeObjFromBackgrounds(Background * const value   );
    void clearBackgrounds            (void                         );

    void pushToCameras             (Camera * const value   );
    void assignCameras            (const MFUnrecCameraPtr  &value);
    void removeFromCameras (UInt32               uiIndex );
    void removeObjFromCameras(Camera * const value   );
    void clearCameras               (void                         );

    void pushToImages              (Image * const value   );
    void assignImages             (const MFUnrecImagePtr   &value);
    void removeFromImages (UInt32               uiIndex );
    void removeObjFromImages(Image * const value   );
    void clearImages                (void                         );

    void pushToTextures            (TextureBaseChunk * const value   );
    void assignTextures           (const MFUnrecTextureBaseChunkPtr &value);
    void removeFromTextures (UInt32               uiIndex );
    void removeObjFromTextures(TextureBaseChunk * const value   );
    void clearTextures              (void                         );

    void pushToSounds              (Sound * const value   );
    void assignSounds             (const MFUnrecSoundPtr   &value);
    void removeFromSounds (UInt32               uiIndex );
    void removeObjFromSounds(Sound * const value   );
    void clearSounds                (void                         );

    void pushToParticleSystems           (ParticleSystem * const value   );
    void assignParticleSystems          (const MFUnrecParticleSystemPtr &value);
    void removeFromParticleSystems (UInt32               uiIndex );
    void removeObjFromParticleSystems(ParticleSystem * const value   );
    void clearParticleSystems            (void                         );

    void pushToMaterials           (Material * const value   );
    void assignMaterials          (const MFUnrecMaterialPtr &value);
    void removeFromMaterials (UInt32               uiIndex );
    void removeObjFromMaterials(Material * const value   );
    void clearMaterials             (void                         );

    void pushToAnimations           (Animation * const value   );
    void assignAnimations          (const MFUnrecAnimationPtr &value);
    void removeFromAnimations (UInt32               uiIndex );
    void removeObjFromAnimations(Animation * const value   );
    void clearAnimations            (void                         );

    void pushToUserInterfaces           (UIDrawingSurface * const value   );
    void assignUserInterfaces          (const MFUnrecUIDrawingSurfacePtr &value);
    void removeFromUserInterfaces (UInt32               uiIndex );
    void removeObjFromUserInterfaces(UIDrawingSurface * const value   );
    void clearUserInterfaces            (void                         );

    void pushToVideos              (VideoWrapper * const value   );
    void assignVideos             (const MFUnrecVideoWrapperPtr &value);
    void removeFromVideos (UInt32               uiIndex );
    void removeObjFromVideos(VideoWrapper * const value   );
    void clearVideos                (void                         );

    void pushToOthers              (FieldContainer * const value   );
    void assignOthers             (const MFUnrecFieldContainerPtr &value);
    void removeFromOthers (UInt32               uiIndex );
    void removeObjFromOthers(FieldContainer * const value   );
    void clearOthers                (void                         );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  AssetStoreTransitPtr  create          (void);
    static  AssetStore           *createEmpty     (void);

    static  AssetStoreTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  AssetStore            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  AssetStoreTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    MFUnrecNodePtr    _mfModels;
    MFUnrecForegroundPtr _mfForegrounds;
    MFUnrecBackgroundPtr _mfBackgrounds;
    MFUnrecCameraPtr  _mfCameras;
    MFUnrecImagePtr   _mfImages;
    MFUnrecTextureBaseChunkPtr _mfTextures;
    MFUnrecSoundPtr   _mfSounds;
    MFUnrecParticleSystemPtr _mfParticleSystems;
    MFUnrecMaterialPtr _mfMaterials;
    MFUnrecAnimationPtr _mfAnimations;
    MFUnrecUIDrawingSurfacePtr _mfUserInterfaces;
    MFUnrecVideoWrapperPtr _mfVideos;
    MFUnrecFieldContainerPtr _mfOthers;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    AssetStoreBase(void);
    AssetStoreBase(const AssetStoreBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~AssetStoreBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const AssetStore *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleModels          (void) const;
    EditFieldHandlePtr editHandleModels         (void);
    GetFieldHandlePtr  getHandleForegrounds     (void) const;
    EditFieldHandlePtr editHandleForegrounds    (void);
    GetFieldHandlePtr  getHandleBackgrounds     (void) const;
    EditFieldHandlePtr editHandleBackgrounds    (void);
    GetFieldHandlePtr  getHandleCameras         (void) const;
    EditFieldHandlePtr editHandleCameras        (void);
    GetFieldHandlePtr  getHandleImages          (void) const;
    EditFieldHandlePtr editHandleImages         (void);
    GetFieldHandlePtr  getHandleTextures        (void) const;
    EditFieldHandlePtr editHandleTextures       (void);
    GetFieldHandlePtr  getHandleSounds          (void) const;
    EditFieldHandlePtr editHandleSounds         (void);
    GetFieldHandlePtr  getHandleParticleSystems (void) const;
    EditFieldHandlePtr editHandleParticleSystems(void);
    GetFieldHandlePtr  getHandleMaterials       (void) const;
    EditFieldHandlePtr editHandleMaterials      (void);
    GetFieldHandlePtr  getHandleAnimations      (void) const;
    EditFieldHandlePtr editHandleAnimations     (void);
    GetFieldHandlePtr  getHandleUserInterfaces  (void) const;
    EditFieldHandlePtr editHandleUserInterfaces (void);
    GetFieldHandlePtr  getHandleVideos          (void) const;
    EditFieldHandlePtr editHandleVideos         (void);
    GetFieldHandlePtr  getHandleOthers          (void) const;
    EditFieldHandlePtr editHandleOthers         (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      AssetStoreBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const AssetStoreBase &source);
};

typedef AssetStoreBase *AssetStoreBaseP;

OSG_END_NAMESPACE

#endif /* _OSGASSETSTOREBASE_H_ */
